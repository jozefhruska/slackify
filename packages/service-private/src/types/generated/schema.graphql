### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type ArticleComponentData {
  content: String!
  id: String!
  lead: String
  title: String!
}

input ArticleComponentDataCreateOneWithoutComponentInput {
  connect: ArticleComponentDataWhereUniqueInput
  create: ArticleComponentDataCreateWithoutComponentInput
}

input ArticleComponentDataCreateWithoutComponentInput {
  content: String!
  id: String
  lead: String
  title: String!
}

input ArticleComponentDataUpdateOneWithoutComponentInput {
  connect: ArticleComponentDataWhereUniqueInput
  create: ArticleComponentDataCreateWithoutComponentInput
  delete: Boolean
  disconnect: Boolean
  update: ArticleComponentDataUpdateWithoutComponentDataInput
  upsert: ArticleComponentDataUpsertWithoutComponentInput
}

input ArticleComponentDataUpdateWithoutComponentDataInput {
  content: String
  id: String
  lead: String
  title: String
}

input ArticleComponentDataUpsertWithoutComponentInput {
  create: ArticleComponentDataCreateWithoutComponentInput!
  update: ArticleComponentDataUpdateWithoutComponentDataInput!
}

input ArticleComponentDataWhereInput {
  AND: [ArticleComponentDataWhereInput!]
  component: ComponentWhereInput
  componentId: StringFilter
  content: StringFilter
  id: StringFilter
  lead: NullableStringFilter
  NOT: [ArticleComponentDataWhereInput!]
  OR: [ArticleComponentDataWhereInput!]
  title: StringFilter
}

input ArticleComponentDataWhereUniqueInput {
  id: String
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Collection {
  components(after: ComponentWhereUniqueInput, before: ComponentWhereUniqueInput, first: Int, last: Int, skip: Int): [Component!]!
  componentsCount: Int!
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  published: Boolean!
  team: Team!
  type: ComponentType!
  updatedAt: DateTime!
}

input CollectionCreateInput {
  components: ComponentCreateManyWithoutCollectionInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  published: Boolean
  team: TeamCreateOneWithoutCollectionsInput!
  type: ComponentType!
  updatedAt: DateTime
}

input CollectionCreateManyWithoutTeamInput {
  connect: [CollectionWhereUniqueInput!]
  create: [CollectionCreateWithoutTeamInput!]
}

input CollectionCreateOneWithoutComponentsInput {
  connect: CollectionWhereUniqueInput
  create: CollectionCreateWithoutComponentsInput
}

input CollectionCreateWithoutComponentsInput {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  published: Boolean
  team: TeamCreateOneWithoutCollectionsInput!
  type: ComponentType!
  updatedAt: DateTime
}

input CollectionCreateWithoutTeamInput {
  components: ComponentCreateManyWithoutCollectionInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  published: Boolean
  type: ComponentType!
  updatedAt: DateTime
}

input CollectionFilter {
  every: CollectionWhereInput
  none: CollectionWhereInput
  some: CollectionWhereInput
}

input CollectionScalarWhereInput {
  AND: [CollectionScalarWhereInput!]
  components: ComponentFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  id: StringFilter
  name: StringFilter
  NOT: [CollectionScalarWhereInput!]
  OR: [CollectionScalarWhereInput!]
  published: BooleanFilter
  teamId: StringFilter
  type: ComponentType
  updatedAt: DateTimeFilter
}

input CollectionsListingInput {
  pagination: PaginationInput
}

input CollectionUpdateInput {
  components: ComponentUpdateManyWithoutCollectionInput
  createdAt: DateTime
  description: String
  id: String
  name: String
  published: Boolean
  team: TeamUpdateOneRequiredWithoutCollectionsInput
  type: ComponentType
  updatedAt: DateTime
}

input CollectionUpdateManyDataInput {
  createdAt: DateTime
  description: String
  id: String
  name: String
  published: Boolean
  type: ComponentType
  updatedAt: DateTime
}

input CollectionUpdateManyWithoutTeamInput {
  connect: [CollectionWhereUniqueInput!]
  create: [CollectionCreateWithoutTeamInput!]
  delete: [CollectionWhereUniqueInput!]
  deleteMany: [CollectionScalarWhereInput!]
  disconnect: [CollectionWhereUniqueInput!]
  set: [CollectionWhereUniqueInput!]
  update: [CollectionUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [CollectionUpdateManyWithWhereNestedInput!]
  upsert: [CollectionUpsertWithWhereUniqueWithoutTeamInput!]
}

input CollectionUpdateManyWithWhereNestedInput {
  data: CollectionUpdateManyDataInput!
  where: CollectionScalarWhereInput!
}

input CollectionUpdateOneRequiredWithoutComponentsInput {
  connect: CollectionWhereUniqueInput
  create: CollectionCreateWithoutComponentsInput
  update: CollectionUpdateWithoutComponentsDataInput
  upsert: CollectionUpsertWithoutComponentsInput
}

input CollectionUpdateWithoutComponentsDataInput {
  createdAt: DateTime
  description: String
  id: String
  name: String
  published: Boolean
  team: TeamUpdateOneRequiredWithoutCollectionsInput
  type: ComponentType
  updatedAt: DateTime
}

input CollectionUpdateWithoutTeamDataInput {
  components: ComponentUpdateManyWithoutCollectionInput
  createdAt: DateTime
  description: String
  id: String
  name: String
  published: Boolean
  type: ComponentType
  updatedAt: DateTime
}

input CollectionUpdateWithWhereUniqueWithoutTeamInput {
  data: CollectionUpdateWithoutTeamDataInput!
  where: CollectionWhereUniqueInput!
}

input CollectionUpsertWithoutComponentsInput {
  create: CollectionCreateWithoutComponentsInput!
  update: CollectionUpdateWithoutComponentsDataInput!
}

input CollectionUpsertWithWhereUniqueWithoutTeamInput {
  create: CollectionCreateWithoutTeamInput!
  update: CollectionUpdateWithoutTeamDataInput!
  where: CollectionWhereUniqueInput!
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  components: ComponentFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  id: StringFilter
  name: StringFilter
  NOT: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  published: BooleanFilter
  team: TeamWhereInput
  teamId: StringFilter
  type: ComponentType
  updatedAt: DateTimeFilter
}

input CollectionWhereUniqueInput {
  id: String
}

type Component {
  articleData: ArticleComponentData
  author: User!
  collection: Collection!
  createdAt: DateTime!
  id: String!
  linkData: LinkComponentData
  plainTextData: PlainTextComponentData
  published: Boolean!
  team: Team!
  type: ComponentType!
  updatedAt: DateTime!
}

input ComponentCreateInput {
  articleData: ArticleComponentDataCreateOneWithoutComponentInput
  author: UserCreateOneWithoutComponentsInput!
  collection: CollectionCreateOneWithoutComponentsInput!
  createdAt: DateTime
  id: String
  linkData: LinkComponentDataCreateOneWithoutComponentInput
  plainTextData: PlainTextComponentDataCreateOneWithoutComponentInput
  published: Boolean
  team: TeamCreateOneWithoutComponentsInput!
  type: ComponentType
  updatedAt: DateTime
}

input ComponentCreateManyWithoutAuthorInput {
  connect: [ComponentWhereUniqueInput!]
  create: [ComponentCreateWithoutAuthorInput!]
}

input ComponentCreateManyWithoutCollectionInput {
  connect: [ComponentWhereUniqueInput!]
  create: [ComponentCreateWithoutCollectionInput!]
}

input ComponentCreateManyWithoutTeamInput {
  connect: [ComponentWhereUniqueInput!]
  create: [ComponentCreateWithoutTeamInput!]
}

input ComponentCreateWithoutAuthorInput {
  articleData: ArticleComponentDataCreateOneWithoutComponentInput
  collection: CollectionCreateOneWithoutComponentsInput!
  createdAt: DateTime
  id: String
  linkData: LinkComponentDataCreateOneWithoutComponentInput
  plainTextData: PlainTextComponentDataCreateOneWithoutComponentInput
  published: Boolean
  team: TeamCreateOneWithoutComponentsInput!
  type: ComponentType
  updatedAt: DateTime
}

input ComponentCreateWithoutCollectionInput {
  articleData: ArticleComponentDataCreateOneWithoutComponentInput
  author: UserCreateOneWithoutComponentsInput!
  createdAt: DateTime
  id: String
  linkData: LinkComponentDataCreateOneWithoutComponentInput
  plainTextData: PlainTextComponentDataCreateOneWithoutComponentInput
  published: Boolean
  team: TeamCreateOneWithoutComponentsInput!
  type: ComponentType
  updatedAt: DateTime
}

input ComponentCreateWithoutTeamInput {
  articleData: ArticleComponentDataCreateOneWithoutComponentInput
  author: UserCreateOneWithoutComponentsInput!
  collection: CollectionCreateOneWithoutComponentsInput!
  createdAt: DateTime
  id: String
  linkData: LinkComponentDataCreateOneWithoutComponentInput
  plainTextData: PlainTextComponentDataCreateOneWithoutComponentInput
  published: Boolean
  type: ComponentType
  updatedAt: DateTime
}

input ComponentFilter {
  every: ComponentWhereInput
  none: ComponentWhereInput
  some: ComponentWhereInput
}

input ComponentScalarWhereInput {
  AND: [ComponentScalarWhereInput!]
  authorId: StringFilter
  collectionId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ComponentScalarWhereInput!]
  OR: [ComponentScalarWhereInput!]
  published: BooleanFilter
  teamId: StringFilter
  type: ComponentType
  updatedAt: DateTimeFilter
}

input ComponentsListingInput {
  authorId: String
  collectionId: String
  pagination: PaginationInput
}

enum ComponentType {
  ARTICLE
  LINK
  PLAIN_TEXT
}

input ComponentUpdateInput {
  articleData: ArticleComponentDataUpdateOneWithoutComponentInput
  author: UserUpdateOneRequiredWithoutComponentsInput
  collection: CollectionUpdateOneRequiredWithoutComponentsInput
  createdAt: DateTime
  id: String
  linkData: LinkComponentDataUpdateOneWithoutComponentInput
  plainTextData: PlainTextComponentDataUpdateOneWithoutComponentInput
  published: Boolean
  team: TeamUpdateOneRequiredWithoutComponentsInput
  type: ComponentType
  updatedAt: DateTime
}

input ComponentUpdateManyDataInput {
  createdAt: DateTime
  id: String
  published: Boolean
  type: ComponentType
  updatedAt: DateTime
}

input ComponentUpdateManyWithoutAuthorInput {
  connect: [ComponentWhereUniqueInput!]
  create: [ComponentCreateWithoutAuthorInput!]
  delete: [ComponentWhereUniqueInput!]
  deleteMany: [ComponentScalarWhereInput!]
  disconnect: [ComponentWhereUniqueInput!]
  set: [ComponentWhereUniqueInput!]
  update: [ComponentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ComponentUpdateManyWithWhereNestedInput!]
  upsert: [ComponentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ComponentUpdateManyWithoutCollectionInput {
  connect: [ComponentWhereUniqueInput!]
  create: [ComponentCreateWithoutCollectionInput!]
  delete: [ComponentWhereUniqueInput!]
  deleteMany: [ComponentScalarWhereInput!]
  disconnect: [ComponentWhereUniqueInput!]
  set: [ComponentWhereUniqueInput!]
  update: [ComponentUpdateWithWhereUniqueWithoutCollectionInput!]
  updateMany: [ComponentUpdateManyWithWhereNestedInput!]
  upsert: [ComponentUpsertWithWhereUniqueWithoutCollectionInput!]
}

input ComponentUpdateManyWithoutTeamInput {
  connect: [ComponentWhereUniqueInput!]
  create: [ComponentCreateWithoutTeamInput!]
  delete: [ComponentWhereUniqueInput!]
  deleteMany: [ComponentScalarWhereInput!]
  disconnect: [ComponentWhereUniqueInput!]
  set: [ComponentWhereUniqueInput!]
  update: [ComponentUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [ComponentUpdateManyWithWhereNestedInput!]
  upsert: [ComponentUpsertWithWhereUniqueWithoutTeamInput!]
}

input ComponentUpdateManyWithWhereNestedInput {
  data: ComponentUpdateManyDataInput!
  where: ComponentScalarWhereInput!
}

input ComponentUpdateWithoutAuthorDataInput {
  articleData: ArticleComponentDataUpdateOneWithoutComponentInput
  collection: CollectionUpdateOneRequiredWithoutComponentsInput
  createdAt: DateTime
  id: String
  linkData: LinkComponentDataUpdateOneWithoutComponentInput
  plainTextData: PlainTextComponentDataUpdateOneWithoutComponentInput
  published: Boolean
  team: TeamUpdateOneRequiredWithoutComponentsInput
  type: ComponentType
  updatedAt: DateTime
}

input ComponentUpdateWithoutCollectionDataInput {
  articleData: ArticleComponentDataUpdateOneWithoutComponentInput
  author: UserUpdateOneRequiredWithoutComponentsInput
  createdAt: DateTime
  id: String
  linkData: LinkComponentDataUpdateOneWithoutComponentInput
  plainTextData: PlainTextComponentDataUpdateOneWithoutComponentInput
  published: Boolean
  team: TeamUpdateOneRequiredWithoutComponentsInput
  type: ComponentType
  updatedAt: DateTime
}

input ComponentUpdateWithoutTeamDataInput {
  articleData: ArticleComponentDataUpdateOneWithoutComponentInput
  author: UserUpdateOneRequiredWithoutComponentsInput
  collection: CollectionUpdateOneRequiredWithoutComponentsInput
  createdAt: DateTime
  id: String
  linkData: LinkComponentDataUpdateOneWithoutComponentInput
  plainTextData: PlainTextComponentDataUpdateOneWithoutComponentInput
  published: Boolean
  type: ComponentType
  updatedAt: DateTime
}

input ComponentUpdateWithWhereUniqueWithoutAuthorInput {
  data: ComponentUpdateWithoutAuthorDataInput!
  where: ComponentWhereUniqueInput!
}

input ComponentUpdateWithWhereUniqueWithoutCollectionInput {
  data: ComponentUpdateWithoutCollectionDataInput!
  where: ComponentWhereUniqueInput!
}

input ComponentUpdateWithWhereUniqueWithoutTeamInput {
  data: ComponentUpdateWithoutTeamDataInput!
  where: ComponentWhereUniqueInput!
}

input ComponentUpsertWithWhereUniqueWithoutAuthorInput {
  create: ComponentCreateWithoutAuthorInput!
  update: ComponentUpdateWithoutAuthorDataInput!
  where: ComponentWhereUniqueInput!
}

input ComponentUpsertWithWhereUniqueWithoutCollectionInput {
  create: ComponentCreateWithoutCollectionInput!
  update: ComponentUpdateWithoutCollectionDataInput!
  where: ComponentWhereUniqueInput!
}

input ComponentUpsertWithWhereUniqueWithoutTeamInput {
  create: ComponentCreateWithoutTeamInput!
  update: ComponentUpdateWithoutTeamDataInput!
  where: ComponentWhereUniqueInput!
}

input ComponentWhereInput {
  AND: [ComponentWhereInput!]
  articleData: ArticleComponentDataWhereInput
  author: UserWhereInput
  authorId: StringFilter
  collection: CollectionWhereInput
  collectionId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  linkData: LinkComponentDataWhereInput
  NOT: [ComponentWhereInput!]
  OR: [ComponentWhereInput!]
  plainTextData: PlainTextComponentDataWhereInput
  published: BooleanFilter
  team: TeamWhereInput
  teamId: StringFilter
  type: ComponentType
  updatedAt: DateTimeFilter
}

input ComponentWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type LinkComponentData {
  id: String!
  text: String
  url: String!
}

input LinkComponentDataCreateOneWithoutComponentInput {
  connect: LinkComponentDataWhereUniqueInput
  create: LinkComponentDataCreateWithoutComponentInput
}

input LinkComponentDataCreateWithoutComponentInput {
  id: String
  text: String
  url: String!
}

input LinkComponentDataUpdateOneWithoutComponentInput {
  connect: LinkComponentDataWhereUniqueInput
  create: LinkComponentDataCreateWithoutComponentInput
  delete: Boolean
  disconnect: Boolean
  update: LinkComponentDataUpdateWithoutComponentDataInput
  upsert: LinkComponentDataUpsertWithoutComponentInput
}

input LinkComponentDataUpdateWithoutComponentDataInput {
  id: String
  text: String
  url: String
}

input LinkComponentDataUpsertWithoutComponentInput {
  create: LinkComponentDataCreateWithoutComponentInput!
  update: LinkComponentDataUpdateWithoutComponentDataInput!
}

input LinkComponentDataWhereInput {
  AND: [LinkComponentDataWhereInput!]
  component: ComponentWhereInput
  componentId: StringFilter
  id: StringFilter
  NOT: [LinkComponentDataWhereInput!]
  OR: [LinkComponentDataWhereInput!]
  text: NullableStringFilter
  url: StringFilter
}

input LinkComponentDataWhereUniqueInput {
  id: String
}

type Mutation {
  createOneCollection(data: CollectionCreateInput!): Collection!
  createOneComponent(data: ComponentCreateInput!): Component!
  deleteOneCollection(where: CollectionWhereUniqueInput!): Collection
  deleteOneComponent(where: ComponentWhereUniqueInput!): Component
  signIn(code: String!): SignInOutput
  updateOneCollection(data: CollectionUpdateInput!, where: CollectionWhereUniqueInput!): Collection
  updateOneComponent(data: ComponentUpdateInput!, where: ComponentWhereUniqueInput!): Component
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

input PaginationInput {
  after: CollectionWhereUniqueInput
  before: CollectionWhereUniqueInput
  first: Int
  last: Int
  skip: Int
}

type PlainTextComponentData {
  id: String!
  text: String!
}

input PlainTextComponentDataCreateOneWithoutComponentInput {
  connect: PlainTextComponentDataWhereUniqueInput
  create: PlainTextComponentDataCreateWithoutComponentInput
}

input PlainTextComponentDataCreateWithoutComponentInput {
  id: String
  text: String!
}

input PlainTextComponentDataUpdateOneWithoutComponentInput {
  connect: PlainTextComponentDataWhereUniqueInput
  create: PlainTextComponentDataCreateWithoutComponentInput
  delete: Boolean
  disconnect: Boolean
  update: PlainTextComponentDataUpdateWithoutComponentDataInput
  upsert: PlainTextComponentDataUpsertWithoutComponentInput
}

input PlainTextComponentDataUpdateWithoutComponentDataInput {
  id: String
  text: String
}

input PlainTextComponentDataUpsertWithoutComponentInput {
  create: PlainTextComponentDataCreateWithoutComponentInput!
  update: PlainTextComponentDataUpdateWithoutComponentDataInput!
}

input PlainTextComponentDataWhereInput {
  AND: [PlainTextComponentDataWhereInput!]
  component: ComponentWhereInput
  componentId: StringFilter
  id: StringFilter
  NOT: [PlainTextComponentDataWhereInput!]
  OR: [PlainTextComponentDataWhereInput!]
  text: StringFilter
}

input PlainTextComponentDataWhereUniqueInput {
  id: String
}

type Query {
  collection(where: CollectionWhereUniqueInput!): Collection
  collections(input: CollectionsListingInput): [Collection!]!
  component(where: ComponentWhereUniqueInput!): Component
  components(input: ComponentsListingInput): [Component!]!
  getUser: User
}

type SignInOutput {
  authToken: String!
  user: User!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Team {
  accessToken: String!
  domain: String!
  id: String!
  name: String!
}

input TeamCreateOneWithoutCollectionsInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutCollectionsInput
}

input TeamCreateOneWithoutComponentsInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutComponentsInput
}

input TeamCreateOneWithoutUsersInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutUsersInput
}

input TeamCreateWithoutCollectionsInput {
  accessToken: String!
  components: ComponentCreateManyWithoutTeamInput
  domain: String!
  id: String!
  name: String!
  users: UserCreateManyWithoutTeamInput
}

input TeamCreateWithoutComponentsInput {
  accessToken: String!
  collections: CollectionCreateManyWithoutTeamInput
  domain: String!
  id: String!
  name: String!
  users: UserCreateManyWithoutTeamInput
}

input TeamCreateWithoutUsersInput {
  accessToken: String!
  collections: CollectionCreateManyWithoutTeamInput
  components: ComponentCreateManyWithoutTeamInput
  domain: String!
  id: String!
  name: String!
}

input TeamUpdateOneRequiredWithoutCollectionsInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutCollectionsInput
  update: TeamUpdateWithoutCollectionsDataInput
  upsert: TeamUpsertWithoutCollectionsInput
}

input TeamUpdateOneRequiredWithoutComponentsInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutComponentsInput
  update: TeamUpdateWithoutComponentsDataInput
  upsert: TeamUpsertWithoutComponentsInput
}

input TeamUpdateOneRequiredWithoutUsersInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateWithoutUsersInput
  update: TeamUpdateWithoutUsersDataInput
  upsert: TeamUpsertWithoutUsersInput
}

input TeamUpdateWithoutCollectionsDataInput {
  accessToken: String
  components: ComponentUpdateManyWithoutTeamInput
  domain: String
  id: String
  name: String
  users: UserUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutComponentsDataInput {
  accessToken: String
  collections: CollectionUpdateManyWithoutTeamInput
  domain: String
  id: String
  name: String
  users: UserUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutUsersDataInput {
  accessToken: String
  collections: CollectionUpdateManyWithoutTeamInput
  components: ComponentUpdateManyWithoutTeamInput
  domain: String
  id: String
  name: String
}

input TeamUpsertWithoutCollectionsInput {
  create: TeamCreateWithoutCollectionsInput!
  update: TeamUpdateWithoutCollectionsDataInput!
}

input TeamUpsertWithoutComponentsInput {
  create: TeamCreateWithoutComponentsInput!
  update: TeamUpdateWithoutComponentsDataInput!
}

input TeamUpsertWithoutUsersInput {
  create: TeamCreateWithoutUsersInput!
  update: TeamUpdateWithoutUsersDataInput!
}

input TeamWhereInput {
  accessToken: StringFilter
  AND: [TeamWhereInput!]
  collections: CollectionFilter
  components: ComponentFilter
  domain: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  users: UserFilter
}

input TeamWhereUniqueInput {
  accessToken: String
  domain: String
  id: String
}

type User {
  accessToken: String!
  email: String!
  id: String!
  image_192: String
  image_24: String
  image_32: String
  image_48: String
  image_512: String
  image_72: String
  name: String!
  team: Team!
}

input UserCreateManyWithoutTeamInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTeamInput!]
}

input UserCreateOneWithoutComponentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutComponentsInput
}

input UserCreateWithoutComponentsInput {
  accessToken: String!
  email: String!
  id: String!
  image_192: String
  image_24: String
  image_32: String
  image_48: String
  image_512: String
  image_72: String
  name: String!
  team: TeamCreateOneWithoutUsersInput!
}

input UserCreateWithoutTeamInput {
  accessToken: String!
  components: ComponentCreateManyWithoutAuthorInput
  email: String!
  id: String!
  image_192: String
  image_24: String
  image_32: String
  image_48: String
  image_512: String
  image_72: String
  name: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserScalarWhereInput {
  accessToken: StringFilter
  AND: [UserScalarWhereInput!]
  components: ComponentFilter
  email: StringFilter
  id: StringFilter
  image_192: NullableStringFilter
  image_24: NullableStringFilter
  image_32: NullableStringFilter
  image_48: NullableStringFilter
  image_512: NullableStringFilter
  image_72: NullableStringFilter
  name: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  teamId: StringFilter
}

input UserUpdateManyDataInput {
  accessToken: String
  email: String
  id: String
  image_192: String
  image_24: String
  image_32: String
  image_48: String
  image_512: String
  image_72: String
  name: String
}

input UserUpdateManyWithoutTeamInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTeamInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutComponentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutComponentsInput
  update: UserUpdateWithoutComponentsDataInput
  upsert: UserUpsertWithoutComponentsInput
}

input UserUpdateWithoutComponentsDataInput {
  accessToken: String
  email: String
  id: String
  image_192: String
  image_24: String
  image_32: String
  image_48: String
  image_512: String
  image_72: String
  name: String
  team: TeamUpdateOneRequiredWithoutUsersInput
}

input UserUpdateWithoutTeamDataInput {
  accessToken: String
  components: ComponentUpdateManyWithoutAuthorInput
  email: String
  id: String
  image_192: String
  image_24: String
  image_32: String
  image_48: String
  image_512: String
  image_72: String
  name: String
}

input UserUpdateWithWhereUniqueWithoutTeamInput {
  data: UserUpdateWithoutTeamDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutComponentsInput {
  create: UserCreateWithoutComponentsInput!
  update: UserUpdateWithoutComponentsDataInput!
}

input UserUpsertWithWhereUniqueWithoutTeamInput {
  create: UserCreateWithoutTeamInput!
  update: UserUpdateWithoutTeamDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  accessToken: StringFilter
  AND: [UserWhereInput!]
  components: ComponentFilter
  email: StringFilter
  id: StringFilter
  image_192: NullableStringFilter
  image_24: NullableStringFilter
  image_32: NullableStringFilter
  image_48: NullableStringFilter
  image_512: NullableStringFilter
  image_72: NullableStringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  team: TeamWhereInput
  teamId: StringFilter
}

input UserWhereUniqueInput {
  accessToken: String
  email: String
  id: String
}
